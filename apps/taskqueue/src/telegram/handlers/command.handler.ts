import { Injectable, Logger } from '@nestjs/common';
import { QueueEngineService } from '../../queue-engine/queue-engine.service';
import { TelegramQueueService } from '../services/telegram-queue.service';
import { ETaskState } from '@tasks/lib';

export interface CommandResult {
  success: boolean;
  message: string;
}

@Injectable()
export class CommandHandler {
  private readonly logger = new Logger(CommandHandler.name);

  constructor(
    private readonly queueEngineService?: QueueEngineService,
    private readonly telegramQueueService?: TelegramQueueService,
  ) {}

  /**
   * Execute a command based on callback data
   */
  async executeCommand(command: string): Promise<CommandResult> {
    this.logger.log(`üéØ Executing command: ${command}`);

    let result: CommandResult;

    switch (command) {
      case 'start_queue_1':
        result = await this.startQueue(1);
        break;

      case 'stop_queue_1':
        result = await this.stopQueue(1);
        break;

      case 'list_queues':
        result = await this.listQueues();
        break;

      case 'status':
        result = await this.getStatus();
        break;

      case 'restart_engine':
        this.logger.log('üìã Command restart_engine recognized, calling restartEngine()...');
        result = await this.restartEngine();
        break;

      case 'execute_task_browser_open':
        result = await this.executeTask('browser_open');
        break;

      case 'execute_task_find_elements':
        result = await this.executeTask('find_elements');
        break;

      case 'queues_menu':
        result = await this.showQueuesMenu();
        break;

      case 'main_menu':
        result = await this.showMainMenu();
        break;

      case 'help':
        result = await this.showHelp();
        break;

      case 'separator':
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        result = { success: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –≤—ã—à–µ ‚¨ÜÔ∏è' };
        break;

      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
        if (command.startsWith('execute_queue_')) {
          const queueIdStr = command.replace('execute_queue_', '');
          const queueId = parseInt(queueIdStr, 10);
          if (!isNaN(queueId)) {
            result = await this.executeQueue(queueId);
            break;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏
        if (command.startsWith('queue_status_')) {
          const queueIdStr = command.replace('queue_status_', '');
          const queueId = parseInt(queueIdStr, 10);
          if (!isNaN(queueId)) {
            result = await this.getQueueStatus(queueId);
            break;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏
        if (command.startsWith('toggle_activity_')) {
          const queueIdStr = command.replace('toggle_activity_', '');
          const queueId = parseInt(queueIdStr, 10);
          if (!isNaN(queueId)) {
            result = await this.toggleQueueActivity(queueId);
            break;
          }
        }

        this.logger.warn(`‚ùì Unknown command received: ${command}`);
        result = { success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' };
    }

    this.logger.log(`üì§ Command ${command} result: ${result.success ? 'SUCCESS' : 'FAILED'} - ${result.message}`);
    return result;
  }

  private async startQueue(queueId: number): Promise<CommandResult> {
    this.logger.log(`Starting queue ${queueId}`);

    if (this.queueEngineService) {
      // TODO: Implement real queue start logic
      return { success: true, message: `–û—á–µ—Ä–µ–¥—å ${queueId} –∑–∞–ø—É—â–µ–Ω–∞` };
    } else {
      return { success: false, message: 'Queue Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
    }
  }

  private async stopQueue(queueId: number): Promise<CommandResult> {
    this.logger.log(`Stopping queue ${queueId}`);

    if (this.queueEngineService) {
      // TODO: Implement real queue stop logic
      return { success: true, message: `–û—á–µ—Ä–µ–¥—å ${queueId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞` };
    } else {
      return { success: false, message: 'Queue Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
    }
  }

  private async getStatus(): Promise<CommandResult> {
    // This will be handled by status service
    return {
      success: true,
      message: '–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    };
  }

  private async restartEngine(): Promise<CommandResult> {
    this.logger.log('üîÑ Executing restart engine command...');

    try {
      if (this.queueEngineService) {
        this.logger.log('üéØ QueueEngineService is available, attempting restart...');
        await this.queueEngineService.restart();
        this.logger.log('‚úÖ Queue Engine restart completed successfully');
        return { success: true, message: 'Queue Engine —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω' };
      } else {
        this.logger.warn('‚ö†Ô∏è QueueEngineService is not available');
        return { success: false, message: 'Queue Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞' };
      }
    } catch (error) {
      this.logger.error('‚ùå Error during engine restart:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  private async executeTask(taskType: string): Promise<CommandResult> {
    this.logger.log(`Executing task: ${taskType}`);
    return { success: true, message: `–ó–∞–¥–∞—á–∞ ${taskType} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞` };
  }

  private async listQueues(): Promise<CommandResult> {
    this.logger.log('üìã Getting list of all queues');

    try {
      if (!this.telegramQueueService) {
        return { success: false, message: 'TelegramQueueService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      const queues = await this.telegramQueueService.getQueuesList();

      if (queues.length === 0) {
        return { success: true, message: 'üìã –û—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }

      const queueList = queues.map((queue, index) => {
        const activeEmoji = queue.isActive !== undefined ? (queue.isActive ? 'üü¢' : 'üî¥') : '‚ö™';
        const activeText = queue.isActive !== undefined ? (queue.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        return `${index + 1}. üìã ${queue.name} (ID: ${queue.id})\n` +
               `   üìä –°—Ç–∞—Ç—É—Å: ${this.getStateEmoji(queue.state)} ${queue.state}\n` +
               `   ${activeEmoji} –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activeText}\n` +
               `   üî¢ –ó–∞–¥–∞—á: ${queue.taskCount}\n` +
               `   ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${queue.schedule}\n`;
      }).join('\n');

      const helpText = '\nüí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n' +
                      '‚Ä¢ üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–¥–∏–Ω —Ä–∞–∑\n' +
                      '‚Ä¢ üìä –°—Ç–∞—Ç—É—Å - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n' +
                      '‚Ä¢ üü¢/üî¥ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é';

      return {
        success: true,
        message: `üìã –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π (${queues.length}):\n\n${queueList}${helpText}`
      };
    } catch (error) {
      this.logger.error('‚ùå Error getting queues list:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return { success: false, message: `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π: ${errorMessage}` };
    }
  }

  private async executeQueue(queueId: number): Promise<CommandResult> {
    this.logger.log(`üöÄ Executing queue ${queueId} once`);

    try {
      if (!this.telegramQueueService) {
        return { success: false, message: 'TelegramQueueService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      const result = await this.telegramQueueService.executeQueueOnce(queueId);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥ –¥–ª—è Telegram (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
      const logPreview = result.log.slice(0, 15).join('\n');
      const isLogTruncated = result.log.length > 15;

      const message = [
        `üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ "${result.queueName}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ`,
        '',
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∏'}`,
        `‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.executionTime}ms`,
        `üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${result.tasksExecuted}`,
        `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.tasksSuccessful}`,
        `‚ùå –û—à–∏–±–æ–∫: ${result.tasksFailed}`,
        '',
        'üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:',
        logPreview,
        isLogTruncated ? '\n... (–ª–æ–≥ —Å–æ–∫—Ä–∞—â–µ–Ω)' : '',
        result.error ? `\nüí• –û—à–∏–±–∫–∞: ${result.error}` : ''
      ].filter(Boolean).join('\n');

      return { success: result.success, message };
    } catch (error) {
      this.logger.error(`‚ùå Error executing queue ${queueId}:`, error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return { success: false, message: `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: ${errorMessage}` };
    }
  }

  private async getQueueStatus(queueId: number): Promise<CommandResult> {
    this.logger.log(`üìä Getting status for queue ${queueId}`);

    try {
      if (!this.telegramQueueService) {
        return { success: false, message: 'TelegramQueueService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      const status = await this.telegramQueueService.getQueueStatus(queueId);
      return { success: true, message: status };
    } catch (error) {
      this.logger.error(`‚ùå Error getting queue ${queueId} status:`, error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return { success: false, message: `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${errorMessage}` };
    }
  }

  private async toggleQueueActivity(queueId: number): Promise<CommandResult> {
    this.logger.log(`üîÑ Toggling activity for queue ${queueId}`);

    try {
      if (!this.telegramQueueService) {
        return { success: false, message: 'TelegramQueueService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
      }

      const result = await this.telegramQueueService.toggleQueueActivity(queueId);
      return { success: result.success, message: result.message };
    } catch (error) {
      this.logger.error(`‚ùå Error toggling queue ${queueId} activity:`, error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return { success: false, message: `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${errorMessage}` };
    }
  }

  private getStateEmoji(state: ETaskState): string {
    switch (state) {
      case ETaskState.running: return 'üü¢';
      case ETaskState.paused: return 'üü°';
      case ETaskState.stopped: return 'üî¥';
      default: return '‚ö™';
    }
  }

  private async showQueuesMenu(): Promise<CommandResult> {
    this.logger.log('üìã Showing queues menu');
    return {
      success: true,
      message: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    };
  }

  private async showMainMenu(): Promise<CommandResult> {
    this.logger.log('üè† Showing main menu');
    return {
      success: true,
      message: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    };
  }

  private async showHelp(): Promise<CommandResult> {
    this.logger.log('‚ùì Showing help information');
    const helpText = [
      '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:',
      '',
      'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏:',
      '‚Ä¢ üìã –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏',
      '‚Ä¢ üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–¥–∏–Ω —Ä–∞–∑',
      '‚Ä¢ üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏',
      '‚Ä¢ üü¢/üî¥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é',
      '',
      'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:',
      '‚Ä¢ üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å - —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã',
      '‚Ä¢ üîÑ Restart Engine - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π',
      '',
      '‚öôÔ∏è –°—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–µ–π:',
      '‚Ä¢ ÔøΩ –ê–∫—Ç–∏–≤–Ω–∞—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞',
      '‚Ä¢ üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è - –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞',
      '',
      'ÔøΩüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:',
      '‚Ä¢ –û—á–µ—Ä–µ–¥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ',
      '‚Ä¢ –í –ª–æ–≥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏',
      '‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏',
      '‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞',
    ].join('\n');

    return {
      success: true,
      message: helpText
    };
  }
}
