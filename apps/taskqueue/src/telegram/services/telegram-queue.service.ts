import { Injectable, Logger } from '@nestjs/common';
import { QueueService } from '../../queue/queue.service';
import { QueueEngineService } from '../../queue-engine/queue-engine.service';
import { ETaskState } from '@tasks/lib';

export interface QueueExecutionResult {
  success: boolean;
  queueId: number;
  queueName: string;
  executionTime: number;
  log: string[];
  tasksExecuted: number;
  tasksSuccessful: number;
  tasksFailed: number;
  error?: string;
}

export interface QueueListItem {
  id: number;
  name: string;
  state: ETaskState;
  taskCount: number;
  schedule: string;
  isActive: boolean;
}

@Injectable()
export class TelegramQueueService {
  private readonly logger = new Logger(TelegramQueueService.name);

  constructor(
    private readonly queueService: QueueService,
    private readonly queueEngineService: QueueEngineService,
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ
   */
  async getQueuesList(): Promise<QueueListItem[]> {
    this.logger.log('üìã Getting queues list for Telegram');

    try {
      const queues = await this.queueService.findAll();

      return queues.map(queue => ({
        id: queue.id,
        name: queue.name,
        state: queue.state,
        taskCount: queue.tasks?.length || 0,
        schedule: queue.schedule,
        isActive: queue.isActive,
      }));
    } catch (error) {
      this.logger.error('‚ùå Error getting queues list:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥
   */
  async executeQueueOnce(queueId: number): Promise<QueueExecutionResult> {
    this.logger.log(`üöÄ Starting one-time execution of queue ${queueId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
      const queues = await this.queueService.findAll();
      const targetQueue = queues.find(q => q.id === queueId);

      if (!targetQueue) {
        throw new Error(`Queue with ID ${queueId} not found`);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ QueueEngineService
      this.logger.log(`üîÑ Delegating execution to QueueEngineService for queue ${queueId}`);
      const engineResult = await this.queueEngineService.executeQueueOnce(queueId);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥ –¥–ª—è Telegram —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —ç–º–æ–¥–∑–∏
      const formattedLog = [
        `üéØ Queue: ${targetQueue.name}`,
        `üìä Tasks count: ${targetQueue.tasks?.length || 0}`,
        `üïê Started at: ${new Date().toLocaleString()}`,
        '',
        'üìù Execution Log:',
        ...engineResult.log.map(line => `  ${line}`),
        '',
        'üìà Execution Summary:',
        `‚è±Ô∏è Total time: ${engineResult.executionTime}ms`,
        `‚úÖ Successful: ${engineResult.tasksSuccessful}`,
        `‚ùå Failed: ${engineResult.tasksFailed}`,
        engineResult.tasksExecuted > 0 ? `üìä Success rate: ${Math.round((engineResult.tasksSuccessful / engineResult.tasksExecuted) * 100)}%` : 'üìä No tasks executed'
      ].filter(Boolean);

      this.logger.log(`‚úÖ Queue ${queueId} execution completed. Success: ${engineResult.tasksSuccessful}, Failed: ${engineResult.tasksFailed}`);

      return {
        success: engineResult.success,
        queueId,
        queueName: targetQueue.name,
        executionTime: engineResult.executionTime,
        log: formattedLog,
        tasksExecuted: engineResult.tasksExecuted,
        tasksSuccessful: engineResult.tasksSuccessful,
        tasksFailed: engineResult.tasksFailed,
        error: engineResult.error,
      };

    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      const errorLog = [
        `üí• Fatal error: ${errorMessage}`,
        `üïê Error occurred at: ${new Date().toLocaleString()}`
      ];

      this.logger.error(`‚ùå Queue ${queueId} execution failed:`, error);

      return {
        success: false,
        queueId,
        queueName: 'Unknown Queue',
        executionTime: 0,
        log: errorLog,
        tasksExecuted: 0,
        tasksSuccessful: 0,
        tasksFailed: 0,
        error: errorMessage,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
   */
  async getQueueStatus(queueId: number): Promise<string> {
    try {
      const queues = await this.queueService.findAll();
      const queue = queues.find(q => q.id === queueId);

      if (!queue) {
        return `‚ùå Queue ${queueId} not found`;
      }      const stateEmoji = this.getStateEmoji(queue.state);
      const stateText = this.getStateText(queue.state);
      const activityEmoji = queue.isActive ? 'üü¢' : '‚ö™';
      const activityText = queue.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      
      return [
        `üéØ Queue: ${queue.name}`,
        `${stateEmoji} Status: ${stateText}`,
        `${activityEmoji} Activity: ${activityText}`,
        `üìä Tasks: ${queue.tasks?.length || 0}`,
        `‚è∞ Schedule: ${queue.schedule}`,
      ].join('\n');

    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      this.logger.error(`Error getting queue ${queueId} status:`, error);
      return `‚ùå Error getting queue status: ${errorMessage}`;
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏ (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
   */
  async toggleQueueActivity(queueId: number): Promise<{
    success: boolean;
    queueId: number;
    queueName: string;
    isActive: boolean;
    message: string;
  }> {
    this.logger.log(`üîÑ Toggling activity for queue ${queueId}`);
    
    try {
      const queues = await this.queueService.findAll();
      const targetQueue = queues.find(q => q.id === queueId);
      
      if (!targetQueue) {
        throw new Error(`Queue with ID ${queueId} not found`);
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ QueueService
      const updatedQueue = await this.queueService.toggleActivity!(queueId);
      
      const statusText = updatedQueue.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞';
      const statusEmoji = updatedQueue.isActive ? 'üü¢' : '‚ö™';
      
      const message = [
        `${statusEmoji} –û—á–µ—Ä–µ–¥—å "${updatedQueue.name}" ${statusText}`,
        '',
        updatedQueue.isActive 
          ? '‚úÖ –û—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é'
          : '‚è∏Ô∏è –û—á–µ—Ä–µ–¥—å –ù–ï –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é',
        `üìã –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º`,
        `‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${updatedQueue.schedule}`,
      ].join('\n');

      this.logger.log(`‚úÖ Queue ${queueId} activity toggled to: ${updatedQueue.isActive}`);

      return {
        success: true,
        queueId,
        queueName: updatedQueue.name,
        isActive: updatedQueue.isActive,
        message,
      };

    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      
      this.logger.error(`‚ùå Failed to toggle queue ${queueId} activity:`, error);

      return {
        success: false,
        queueId,
        queueName: 'Unknown Queue',
        isActive: false,
        message: `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${errorMessage}`,
      };
    }
  }

  private getStateEmoji(state: ETaskState): string {
    switch (state) {
      case ETaskState.running: return 'üü¢';
      case ETaskState.paused: return 'üü°';
      case ETaskState.stopped: return 'üî¥';
      case ETaskState.error: return 'üî¥';
      case ETaskState.locked: return 'üîí';
      default: return '‚ö™';
    }
  }

  private getStateText(state: ETaskState): string {
    switch (state) {
      case ETaskState.running: return 'Running';
      case ETaskState.paused: return 'Paused';
      case ETaskState.stopped: return 'Stopped';
      case ETaskState.error: return 'Error';
      case ETaskState.locked: return 'Locked';
      default: return 'Unknown';
    }
  }
}
