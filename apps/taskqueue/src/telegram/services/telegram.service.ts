import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { TelegramUpdateDto, TelegramCallbackQueryDto } from '../dto';
import { TelegramApiService } from './telegram-api.service';
import { StatusService } from './status.service';
import { TelegramQueueService } from './telegram-queue.service';
import { CommandHandler, AuthHandler } from '../handlers';
import { KeyboardUtils, MessageFormatter } from '../utils';

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramService.name);
  private pollingInterval: any = null;
  private lastUpdateId = 0;

  constructor(
    private readonly telegramApiService: TelegramApiService,
    private readonly statusService: StatusService,
    private readonly telegramQueueService: TelegramQueueService,
    private readonly commandHandler: CommandHandler,
    private readonly authHandler: AuthHandler
  ) {}

  async onModuleInit() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      this.logger.warn('‚ö†Ô∏è  TELEGRAM_BOT_TOKEN not set - Telegram integration disabled');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const isValid = await this.telegramApiService.checkBotStatus();
    if (!isValid) {
      this.logger.error('‚ùå Failed to connect to Telegram bot - polling disabled');
      return;
    }

    // –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await this.telegramApiService.deleteWebhook();
    this.startPolling();
  }

  /**
   * Start polling for updates
   */
  private startPolling(): void {
    this.logger.log('üöÄ Starting Telegram polling...');
    this.pollingInterval = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ñ–ª–∞–≥
    this.pollForUpdates();
  }

  /**
   * Poll for updates from Telegram
   */
  private async pollForUpdates(): Promise<void> {
    this.logger.log('üì° Polling loop started, waiting for updates...');

    while (this.pollingInterval) {
      try {
        this.logger.debug(`üîÑ Requesting updates from offset ${this.lastUpdateId + 1}`);

        // Long polling - –∑–∞–ø—Ä–æ—Å –∂–¥–µ—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const updates = await this.telegramApiService.getUpdates(this.lastUpdateId + 1);

        if (updates.length > 0) {
          this.logger.log(`üì® Received ${updates.length} updates`);

          for (const update of updates) {
            this.logger.debug(`Processing update ${update.update_id}`);
            this.lastUpdateId = Math.max(this.lastUpdateId, update.update_id);
            await this.handleUpdate(update);
          }
        } else {
          this.logger.debug('üì≠ No new updates');
        }

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        this.logger.error(
          '‚ùå Polling error:',
          error instanceof Error ? error.message : 'Unknown error'
        );
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }

    this.logger.warn('‚ö†Ô∏è  Polling loop stopped');
  }

  /**
   * Handle incoming update
   */
  async handleUpdate(update: TelegramUpdateDto): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const user = this.authHandler.getUserFromUpdate(update);
      if (!user || !this.authHandler.isUserAuthorized(user)) {
        await this.handleUnauthorizedAccess(update);
        return;
      }

      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      } else if (update.message?.text) {
        await this.handleMessage(update.message.text, this.authHandler.getChatIdFromUpdate(update)!);
      }
    } catch (error) {
      this.logger.error('Error handling update:', error);
    }
  }

  /**
   * Handle unauthorized access
   */
  private async handleUnauthorizedAccess(update: TelegramUpdateDto): Promise<void> {
    const user = this.authHandler.getUserFromUpdate(update);
    const chatId = this.authHandler.getChatIdFromUpdate(update);

    if (!chatId || !user) return;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
    const message = this.authHandler.formatUnauthorizedMessage(user);
    await this.telegramApiService.sendMessage(chatId, message);

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    this.authHandler.logUnauthorizedAccess(user, chatId);
  }

  /**
   * Handle text message
   */
  private async handleMessage(text: string, chatId: string): Promise<void> {
    if (text === '/start' || text === '/menu') {
      await this.telegramApiService.sendMessage(chatId, MessageFormatter.formatWelcomeMessage());
      await this.telegramApiService.sendTaskControlMenu(chatId, KeyboardUtils.createMainMenuKeyboardV2());
    } else if (text === '/queues') {
      await this.showQueuesMenu(chatId);
    } else if (text === '/status') {
      await this.sendSystemStatus(chatId);
    } else if (text === '/help') {
      await this.telegramApiService.sendMessage(chatId, MessageFormatter.formatHelpMessage());
    } else if (text === '/security') {
      await this.sendSecurityInfo(chatId);
    } else {
      await this.telegramApiService.sendMessage(
        chatId,
        'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '‚Ä¢ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
          '‚Ä¢ /queues - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏\n' +
          '‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n' +
          '‚Ä¢ /help - –ø–æ–º–æ—â—å'
      );
    }
  }

  /**
   * Handle callback query (button press)
   */
  private async handleCallbackQuery(callbackQuery: TelegramCallbackQueryDto): Promise<void> {
    const { data, from, message } = callbackQuery;
    const chatId = message?.chat.id.toString() || from.id.toString();

    if (!data) return;

    // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    this.logger.log(
      `‚úÖ Authorized command: ${data} from @${from.username || 'unknown'} (ID: ${from.id})`
    );

    try {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      if (data === 'queues_menu') {
        await this.showQueuesMenu(chatId);
        await this.telegramApiService.answerCallbackQuery(callbackQuery.id, 'üìã –ú–µ–Ω—é –æ—á–µ—Ä–µ–¥–µ–π');
        return;
      }

      if (data === 'main_menu') {
        await this.telegramApiService.sendMessage(
          chatId,
          'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
          KeyboardUtils.createMainMenuKeyboardV2()
        );
        await this.telegramApiService.answerCallbackQuery(callbackQuery.id, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        return;
      }

      if (data === 'list_queues') {
        await this.showQueueList(chatId);
        await this.telegramApiService.answerCallbackQuery(callbackQuery.id, 'üìã –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π');
        return;
      }

      // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      const result = await this.commandHandler.executeCommand(data);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await this.telegramApiService.answerCallbackQuery(
        callbackQuery.id,
        result.success ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.telegramApiService.sendMessage(chatId, result.message);

      // –î–ª—è –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      if (data.startsWith('execute_queue_')) {
        setTimeout(() => this.showQueueList(chatId), 1000);
      }

    } catch (error) {
      await this.telegramApiService.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
      this.logger.error('Error executing command:', error);
    }
  }

  /**
   * Send system status
   */
  private async sendSystemStatus(chatId: string): Promise<void> {
    const status = await this.statusService.getFormattedStatus();
    await this.telegramApiService.sendMessage(chatId, `üìä <b>System Status</b>\n\n${status}`);
  }

  /**
   * Send security info
   */
  private async sendSecurityInfo(chatId: string): Promise<void> {
    const allowedUsername = process.env.TELEGRAM_ALLOWED_USERNAME || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    const uptime = this.getUptime();
    const securityText = MessageFormatter.formatSecurityInfo(allowedUsername, uptime);
    await this.telegramApiService.sendMessage(chatId, securityText);
  }

  /**
   * Get uptime string
   */
  private getUptime(): string {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    return `${hours}h ${minutes}m`;
  }

  /**
   * Send notification (public method for external use)
   */
  async sendNotification(message: string, showControls = false): Promise<void> {
    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!chatId) {
      this.logger.warn('TELEGRAM_CHAT_ID not set');
      return;
    }

    if (showControls) {
      await this.telegramApiService.sendTaskControlMenu(chatId, KeyboardUtils.createControlKeyboard());
    } else {
      await this.telegramApiService.sendMessage(chatId, message);
    }
  }

  /**
   * Show queues management menu
   */
  private async showQueuesMenu(chatId: string): Promise<void> {
    await this.telegramApiService.sendMessage(
      chatId,
      'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      KeyboardUtils.createQueuesKeyboard()
    );
  }

  /**
   * Show list of queues with action buttons
   */
  private async showQueueList(chatId: string): Promise<void> {
    try {
      const queues = await this.telegramQueueService.getQueuesList();

      if (queues.length === 0) {
        await this.telegramApiService.sendMessage(
          chatId,
          'üìã –û—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.'
        );
        return;
      }

      const message = [
        `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ (${queues.length}):`,
        '',
        ...queues.map(
          (queue, index) =>
            `${index + 1}. **${queue.name}** (ID: ${queue.id})\n` +
            `   üìä –°—Ç–∞—Ç—É—Å: ${this.getStateEmojiForService(queue.state)} ${
              queue.state
            }\n` +
            `   üî¢ –ó–∞–¥–∞—á: ${queue.taskCount}\n` +
            `   ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${queue.schedule}`
        ),
        '',
        'üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏',
        'üìä –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
      ].join('\n');

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—á–µ—Ä–µ–¥–∏
      const keyboard = KeyboardUtils.createQueueListKeyboard(
        queues.map(q => ({ id: q.id, name: q.name, isActive: q.isActive }))
      );

      await this.telegramApiService.sendMessage(chatId, message, keyboard);
    } catch (error) {
      this.logger.error('Error showing queue list:', error);
      await this.telegramApiService.sendMessage(
        chatId,
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π'
      );
    }
  }

  private getStateEmojiForService(state: any): string {
    switch (String(state)) {
      case 'running': return 'üü¢';
      case 'paused': return 'üü°';
      case 'stopped': return 'üî¥';
      default: return '‚ö™';
    }
  }

  onModuleDestroy() {
    if (this.pollingInterval) {
      this.pollingInterval = null; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª polling
      this.logger.log('üõë Telegram polling stopped');
    }
  }
}
