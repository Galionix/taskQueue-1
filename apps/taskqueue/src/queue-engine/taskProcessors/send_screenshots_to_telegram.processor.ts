import { ExeTypes } from '@tasks/lib';
import { TaskModel } from '@tasks/lib';
import { taskProcessorType } from './';
import { Injectable } from '@nestjs/common';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è TelegramApiService
interface ITelegramApiService {
  sendPhoto(chatId: string, photoPath: string, caption?: string): Promise<void>;
  sendMediaGroup(chatId: string, photoPaths: string[], caption?: string): Promise<void>;
}

export const sendScreenshotsToTelegram = (telegramApiService?: ITelegramApiService): taskProcessorType => {
  return {
    name: 'sendScreenshotsToTelegram',
    description: 'Sends screenshots from storage to Telegram',
    blocks: [],
    execute: async (data: TaskModel, storage) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ storage
      if (!storage.screenshotFiles || storage.screenshotFiles.length === 0) {
        return {
          success: true,
          message: 'No screenshots found in storage'
        };
      }

      const chatId = process.env.TELEGRAM_CHAT_ID;
      if (!chatId) {
        return {
          success: false,
          message: 'TELEGRAM_CHAT_ID not configured'
        };
      }

      if (!telegramApiService) {
        return {
          success: false,
          message: 'TelegramApiService not available'
        };
      }

      try {
        const screenshotFiles = storage.screenshotFiles as string[];
        const caption = storage.message || `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏: ${data.name}`;

        if (screenshotFiles.length === 1) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ
          await telegramApiService.sendPhoto(chatId, screenshotFiles[0], caption);
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
          await telegramApiService.sendMediaGroup(chatId, screenshotFiles, caption);
        }

        // –û—á–∏—â–∞–µ–º storage –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        storage.screenshotFiles = [];

        return {
          success: true,
          message: `Screenshots sent to Telegram: ${screenshotFiles.length} files`,
          data: {
            sentFiles: screenshotFiles.length,
            chatId
          },
        };
      } catch (error) {
        console.error('Error sending screenshots to Telegram:', error);
        return {
          success: false,
          message: `Failed to send screenshots: ${error instanceof Error ? error.message : 'Unknown error'}`,
        };
      }
    },
  };
};
