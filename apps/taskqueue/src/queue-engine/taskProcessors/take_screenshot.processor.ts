import * as fs from 'fs';
import * as path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

import { ExeTypes, ExeTypesPayloadMap } from '@tasks/lib';

import { TaskEntity } from '../../task/task.entity';
import { taskProcessorType } from './';

const execAsync = promisify(exec);
const payloadType = ExeTypesPayloadMap[ExeTypes.take_screenshot];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ Telegram
async function sendScreenshotsToTelegram(screenshotFiles: string[], caption: string): Promise<void> {
  const chatId = process.env.TELEGRAM_CHAT_ID;
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!chatId) {
    console.warn('TELEGRAM_CHAT_ID not configured, skipping screenshot send');
    return;
  }
  
  if (!botToken) {
    console.warn('TELEGRAM_BOT_TOKEN not configured, skipping screenshot send');
    return;
  }

  const axios = require('axios');
  const FormData = require('form-data');
  const fs = require('fs');
  
  const API_URL = `https://api.telegram.org/bot${botToken}`;
  
  console.log(`Attempting to send ${screenshotFiles.length} screenshots to chat ${chatId}`);

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    try {
      const testResponse = await axios.get(`${API_URL}/getChat?chat_id=${chatId}`);
      console.log('Bot has access to chat:', testResponse.data.ok);
    } catch (testError: any) {
      console.warn('Bot test access failed:', testError.response?.data || testError.message);
      if (testError.response?.status === 403) {
        console.error('Bot does not have permission to access this chat. Please:');
        console.error('1. Make sure the bot is added to the chat');
        console.error('2. Make sure the bot has permission to send messages');
        console.error('3. Check that TELEGRAM_CHAT_ID is correct');
        return;
      }
    }

    if (screenshotFiles.length === 1) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ
      const form = new FormData();
      form.append('chat_id', chatId);
      form.append('photo', fs.createReadStream(screenshotFiles[0]));
      form.append('caption', caption);
      form.append('parse_mode', 'HTML');

      const response = await axios.post(`${API_URL}/sendPhoto`, form, {
        headers: form.getHeaders(),
        timeout: 30000,
      });
      
      console.log(`Screenshot sent successfully: ${response.data.ok}`);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
      const form = new FormData();
      form.append('chat_id', chatId);
      
      const media = screenshotFiles.map((path, index) => ({
        type: 'photo',
        media: `attach://photo${index}`,
        ...(index === 0 ? { caption, parse_mode: 'HTML' } : {})
      }));
      
      form.append('media', JSON.stringify(media));
      
      screenshotFiles.forEach((path, index) => {
        form.append(`photo${index}`, fs.createReadStream(path));
      });

      const response = await axios.post(`${API_URL}/sendMediaGroup`, form, {
        headers: form.getHeaders(),
        timeout: 30000,
      });
      
      console.log(`Screenshots sent successfully: ${response.data.ok}`);
    }
    
    console.log(`‚úÖ Screenshots sent to Telegram: ${screenshotFiles.length} files`);
  } catch (error: any) {
    if (error.response?.status === 403) {
      console.error('‚ùå Telegram Bot Access Error (403):');
      console.error('The bot does not have permission to send messages to this chat.');
      console.error('Please check:');
      console.error('1. Bot is added to the chat');
      console.error('2. Bot has "Send Messages" permission');
      console.error('3. TELEGRAM_CHAT_ID is correct');
      console.error('4. TELEGRAM_BOT_TOKEN is valid');
    } else if (error.response?.status === 400) {
      console.error('‚ùå Bad Request (400):', error.response.data);
    } else {
      console.error('‚ùå Failed to send screenshots to Telegram:', error.response?.data || error.message);
    }
    
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.warn('Screenshot task completed, but failed to send to Telegram');
  }
}

export const takeScreenshot = (): taskProcessorType => {
  return {
    name: 'takeScreenshot',
    description: 'Takes screenshot of all computer screens using PowerShell',
    blocks: [], // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    execute: async (data: TaskEntity, storage) => {
      const payload = JSON.parse(data.payload) as typeof payloadType;

      try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        const taskFolderName = `task_${data.id}_${data.name.replace(/[^a-zA-Z0-9]/g, '_')}`;
        const taskOutputPath = path.join(payload.outputPath, taskFolderName);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(taskOutputPath)) {
          fs.mkdirSync(taskOutputPath, { recursive: true });
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = payload.filename.replace('{timestamp}', timestamp);
        const fullPath = path.join(taskOutputPath, filename);

        // –°–æ–∑–¥–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
        const powershellScriptPath = path.join(taskOutputPath, 'screenshot_script.ps1');
        const powershellScript = `Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
$bounds = [System.Windows.Forms.SystemInformation]::VirtualScreen

# –°–æ–∑–¥–∞–µ–º bitmap –¥–ª—è –≤—Å–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
$bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height

# –°–æ–∑–¥–∞–µ–º graphics –æ–±—ä–µ–∫—Ç
$graphics = [System.Drawing.Graphics]::FromImage($bitmap)

# –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∞
$graphics.CopyFromScreen($bounds.X, $bounds.Y, 0, 0, $bounds.Size)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
$bitmap.Save('${fullPath.replace(/\\/g, '\\\\')}')

# –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
$graphics.Dispose()
$bitmap.Dispose()

Write-Host "Screenshot saved to ${fullPath.replace(/\\/g, '\\\\')}"
Write-Host "Size: $($bounds.Width)x$($bounds.Height)"`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(powershellScriptPath, powershellScript);

        // –í—ã–ø–æ–ª–Ω—è–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç
        const command = `powershell -ExecutionPolicy Bypass -File "${powershellScriptPath}"`;
        
        console.log('Taking screenshot of all screens...');
        await execAsync(command);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        fs.unlinkSync(powershellScriptPath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if (!fs.existsSync(fullPath)) {
          throw new Error(`Screenshot file was not created at ${fullPath}`);
        }

        console.log(`Screenshot saved: ${fullPath}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ storage –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (payload.sendNotification) {
          const message = `Screenshot taken: ${fullPath}`;
          storage.message += storage.message ? `\n${message}` : message;
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
          storage.screenshotFiles = [fullPath];
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ Telegram –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHAT_ID
          try {
            await sendScreenshotsToTelegram([fullPath], `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∏–∑ –∑–∞–¥–∞—á–∏: ${data.name}`);
          } catch (error: any) {
            console.warn('Failed to send screenshot to Telegram:', error.message);
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ storage, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            storage.telegramError = `Failed to send to Telegram: ${error.message}`;
          }
        }

        return {
          success: true,
          message: 'Screenshot of all screens taken successfully',
          data: {
            file: fullPath,
            outputPath: taskOutputPath,
            taskFolder: taskFolderName,
          },
        };
      } catch (error) {
        console.error('Error taking screenshot:', error);
        const errorMessage =
          error instanceof Error ? error.message : 'Unknown error';
        throw new Error(`Failed to take screenshot: ${errorMessage}`);
      }
    },
  };
};
