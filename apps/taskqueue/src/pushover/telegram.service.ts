import {
  Injectable,
  Logger,
  OnModuleInit,
  Optional,
  OnModuleDestroy,
} from '@nestjs/common';
import { QueueEngineService } from '../queue-engine/queue-engine.service';
import { QueueService } from '../queue/queue.service';
import { TaskService } from '../task/task.service';
import { TelegramApiService } from './telegram-api.service';
import {
  TelegramUpdateDto,
  TelegramCallbackQueryDto,
} from './dto/telegram.dto';

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramService.name);
  private pollingInterval: NodeJS.Timeout | null = null;
  private lastUpdateId = 0;

  constructor(
    private readonly telegramApiService: TelegramApiService,
    @Optional() private readonly queueEngineService: QueueEngineService,
    @Optional() private readonly queueService: QueueService,
    @Optional() private readonly taskService: TaskService
  ) {}

  async onModuleInit() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      this.logger.warn(
        '‚ö†Ô∏è  TELEGRAM_BOT_TOKEN not set - Telegram integration disabled'
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const isValid = await this.telegramApiService.checkBotStatus();
    if (!isValid) {
      this.logger.error(
        '‚ùå Failed to connect to Telegram bot - polling disabled'
      );
      return;
    }

    // –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await this.telegramApiService.deleteWebhook();
    this.startPolling();
  }

  private startPolling(): void {
    this.logger.log('üöÄ Starting Telegram polling...');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ polling –∞–∫—Ç–∏–≤–µ–Ω
    this.pollingInterval = setInterval(() => {}, 1000) as NodeJS.Timeout; // Dummy interval –¥–ª—è —Ñ–ª–∞–≥–∞
    clearInterval(this.pollingInterval); // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
    this.pollingInterval = true as any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ñ–ª–∞–≥
    this.pollForUpdates();
  }

  private async pollForUpdates(): Promise<void> {
    this.logger.log('üì° Polling loop started, waiting for updates...');

    while (this.pollingInterval) {
      try {
        this.logger.debug(`üîÑ Requesting updates from offset ${this.lastUpdateId + 1}`);

        // Long polling - –∑–∞–ø—Ä–æ—Å –∂–¥–µ—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const updates = await this.telegramApiService.getUpdates(
          this.lastUpdateId + 1
        );

        if (updates.length > 0) {
          this.logger.log(`üì® Received ${updates.length} updates`);

          for (const update of updates) {
            this.logger.debug(`Processing update ${update.update_id}`);
            this.lastUpdateId = Math.max(this.lastUpdateId, update.update_id);
            await this.handleUpdate(update);
          }
        } else {
          this.logger.debug('üì≠ No new updates');
        }

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 100));

      } catch (error) {
        this.logger.error(
          '‚ùå Polling error:',
          error instanceof Error ? error.message : 'Unknown error'
        );
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }

    this.logger.warn('‚ö†Ô∏è  Polling loop stopped');
  }

  async handleUpdate(update: TelegramUpdateDto): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const user = update.callback_query?.from || update.message?.from;
      if (!user || !this.isUserAuthorized(user)) {
        await this.handleUnauthorizedAccess(update);
        return;
      }

      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      } else if (update.message?.text) {
        await this.handleMessage(
          update.message.text,
          update.message.chat.id.toString()
        );
      }
    } catch (error) {
      this.logger.error('Error handling update:', error);
    }
  }

  private isUserAuthorized(user: any): boolean {
    const allowedUsername = process.env.TELEGRAM_ALLOWED_USERNAME;

    if (!allowedUsername) {
      this.logger.warn(
        'TELEGRAM_ALLOWED_USERNAME not set - allowing all users'
      );
      return true;
    }

    const isAuthorized =
      user.username?.toLowerCase() === allowedUsername.toLowerCase();

    if (!isAuthorized) {
      this.logger.warn(
        `Unauthorized access attempt from user: ${
          user.username || 'unknown'
        } (ID: ${user.id})`
      );
    }

    return isAuthorized;
  }

  private async handleUnauthorizedAccess(
    update: TelegramUpdateDto
  ): Promise<void> {
    const user = update.callback_query?.from || update.message?.from;
    const chatId =
      update.callback_query?.message?.chat.id || update.message?.chat.id;

    if (!chatId) return;

    const username = user?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    const userId = user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
    await this.telegramApiService.sendMessage(
      chatId.toString(),
      `üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</b>\n\n` +
        `–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n` +
        `–í–∞—à username: @${username}\n` +
        `–í–∞—à ID: ${userId}\n\n` +
        `–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    this.logger.warn(
      `üö´ Unauthorized access attempt: @${username} (ID: ${userId}) from chat ${chatId}`
    );
  }

  private async handleMessage(text: string, chatId: string): Promise<void> {
    if (text === '/start' || text === '/menu') {
      await this.telegramApiService.sendMessage(
        chatId,
        `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n` +
          `–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Task Queue —Å–∏—Å—Ç–µ–º–æ–π.\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `‚Ä¢ /menu - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n` +
          `‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
          `‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n` +
          `‚Ä¢ /security - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`
      );
      await this.telegramApiService.sendTaskControlMenu(chatId);
    } else if (text === '/status') {
      await this.sendSystemStatus(chatId);
    } else if (text === '/help') {
      await this.sendHelpMessage(chatId);
    } else if (text === '/security') {
      await this.sendSecurityInfo(chatId);
    } else {
      await this.telegramApiService.sendMessage(
        chatId,
        'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          '‚Ä¢ /menu - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n' +
          '‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n' +
          '‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n' +
          '‚Ä¢ /security - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
      );
    }
  }

  private async handleCallbackQuery(
    callbackQuery: TelegramCallbackQueryDto
  ): Promise<void> {
    const { data, from, message } = callbackQuery;
    const chatId = message?.chat.id.toString() || from.id.toString();

    if (!data) return;

    // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    this.logger.log(
      `‚úÖ Authorized command: ${data} from @${
        from.username || 'unknown'
      } (ID: ${from.id})`
    );

    try {
      const result = await this.executeCommand(data);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await this.telegramApiService.answerCallbackQuery(
        callbackQuery.id,
        result.success ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      if (message) {
        const statusText = await this.getFormattedStatus();
        await this.telegramApiService.editMessageText(
          chatId,
          message.message_id,
          `üéõÔ∏è <b>Task Queue Control Panel</b>\n\n${statusText}\n\n<i>–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞: ${data}</i>\n<i>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.message}</i>`,
          this.getControlKeyboard()
        );
      }
    } catch (error) {
      await this.telegramApiService.answerCallbackQuery(
        callbackQuery.id,
        '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
      );
    }
  }

  private async executeCommand(
    command: string
  ): Promise<{ success: boolean; message: string }> {
    this.logger.log(`üéØ Executing command: ${command}`);

    let result: { success: boolean; message: string };

    switch (command) {
      case 'start_queue_1':
        result = await this.startQueue(1);
        break;

      case 'stop_queue_1':
        result = await this.stopQueue(1);
        break;

      case 'status':
        result = await this.getStatus();
        break;

      case 'restart_engine':
        this.logger.log('üìã Command restart_engine recognized, calling restartEngine()...');
        result = await this.restartEngine();
        break;

      case 'execute_task_browser_open':
        result = await this.executeTask('browser_open');
        break;

      case 'execute_task_find_elements':
        result = await this.executeTask('find_elements');
        break;

      default:
        this.logger.warn(`‚ùì Unknown command received: ${command}`);
        result = { success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' };
    }

    this.logger.log(`üì§ Command ${command} result: ${result.success ? 'SUCCESS' : 'FAILED'} - ${result.message}`);
    return result;
  }

  private async startQueue(
    queueId: number
  ): Promise<{ success: boolean; message: string }> {
    this.logger.log(`Starting queue ${queueId}`);

    if (this.queueEngineService) {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å QueueEngineService
      // await this.queueEngineService.startQueue(queueId);
      return { success: true, message: `–û—á–µ—Ä–µ–¥—å ${queueId} –∑–∞–ø—É—â–µ–Ω–∞` };
    } else {
      return { success: false, message: 'Queue Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
    }
  }

  private async stopQueue(
    queueId: number
  ): Promise<{ success: boolean; message: string }> {
    this.logger.log(`Stopping queue ${queueId}`);

    if (this.queueEngineService) {
      // await this.queueEngineService.stopQueue(queueId);
      return { success: true, message: `–û—á–µ—Ä–µ–¥—å ${queueId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞` };
    } else {
      return { success: false, message: 'Queue Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
    }
  }

  private async getStatus(): Promise<{ success: boolean; message: string }> {
    try {
      const statusText = await this.getFormattedStatus();
      return {
        success: true,
        message: statusText.replace(/<\/?b>/g, '') // Remove HTML tags for plain text
      };
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã'
      };
    }
  }

  private async restartEngine(): Promise<{
    success: boolean;
    message: string;
  }> {
    this.logger.log('üîÑ Executing restart engine command...');

    try {
      if (this.queueEngineService) {
        this.logger.log('üéØ QueueEngineService is available, attempting restart...');
        await this.queueEngineService.restart();
        this.logger.log('‚úÖ Queue Engine restart completed successfully');
        return { success: true, message: 'Queue Engine —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω' };
      } else {
        this.logger.warn('‚ö†Ô∏è QueueEngineService is not available');
        return { success: false, message: 'Queue Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞' };
      }
    } catch (error) {
      this.logger.error('‚ùå Error during engine restart:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  private async executeTask(
    taskType: string
  ): Promise<{ success: boolean; message: string }> {
    this.logger.log(`Executing task: ${taskType}`);
    return { success: true, message: `–ó–∞–¥–∞—á–∞ ${taskType} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞` };
  }

  private async sendSystemStatus(chatId: string): Promise<void> {
    const status = await this.getFormattedStatus();
    await this.telegramApiService.sendMessage(
      chatId,
      `üìä <b>System Status</b>\n\n${status}`
    );
  }

  private async sendHelpMessage(chatId: string): Promise<void> {
    const helpText =
      `ü§ñ <b>Task Queue Bot - –°–ø—Ä–∞–≤–∫–∞</b>\n\n` +
      `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
      `‚Ä¢ /start, /menu - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n` +
      `‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
      `‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
      `‚Ä¢ /security - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n` +
      `<b>–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n` +
      `‚ñ∂Ô∏è Start Queue - –∑–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á\n` +
      `‚èπÔ∏è Stop Queue - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏\n` +
      `üìä Status - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n` +
      `üîÑ Restart Engine - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞\n` +
      `üåê Open Google - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∑–∞–¥–∞—á—É\n` +
      `üîç Count Elements - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞\n\n` +
      `<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n` +
      `üîí –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
      `üìù –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n\n` +
      `<i>–í–µ—Ä—Å–∏—è: 1.0 | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è Task Queue System</i>`;

    await this.telegramApiService.sendMessage(chatId, helpText);
  }

  private async sendSecurityInfo(chatId: string): Promise<void> {
    const allowedUsername =
      process.env.TELEGRAM_ALLOWED_USERNAME || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    const uptime = this.getUptime();

    const securityText =
      `üîí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n` +
      `<b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n` +
      `<b>–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π username:</b> @${allowedUsername}\n` +
      `<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b> ${uptime}\n\n` +
      `<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n` +
      `üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username –≤–∫–ª—é—á–µ–Ω–∞\n` +
      `üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π\n` +
      `üö´ –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
      `<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:</b>\n` +
      `–ò–∑–º–µ–Ω–∏—Ç–µ TELEGRAM_ALLOWED_USERNAME –≤ .env —Ñ–∞–π–ª–µ`;

    await this.telegramApiService.sendMessage(chatId, securityText);
  }

  private async getFormattedStatus(): Promise<string> {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
      let activeQueuesCount = 0;
      let queueEngineStatus = '‚ùå Inactive';

      if (this.queueEngineService && (this.queueEngineService as any).schedules) {
        const schedules = (this.queueEngineService as any).schedules;
        activeQueuesCount = Object.keys(schedules).length;
        queueEngineStatus = activeQueuesCount > 0 ? 'üü¢ Active' : 'üü° Ready';
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
      let totalTasks = 0;
      if (this.taskService) {
        try {
          const tasks = await this.taskService.findAll();
          totalTasks = tasks.length;
        } catch (error) {
          this.logger.warn('Could not fetch tasks count:', error);
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
      const memoryUsage = process.memoryUsage();
      const memoryMB = Math.round(memoryUsage.rss / 1024 / 1024);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ uptime
      const uptime = this.getUptime();

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–∞—É–∑–µ—Ä–∞
      const browserStatus = this.queueEngineService && (this.queueEngineService as any).browser
        ? 'üåê Connected'
        : '‚ùå Disconnected';

      return `${queueEngineStatus} <b>Queue Engine</b>
üìä <b>Active Queues:</b> ${activeQueuesCount}
üìù <b>Total Tasks:</b> ${totalTasks}
üåê <b>Browser:</b> ${browserStatus}
‚è±Ô∏è <b>Uptime:</b> ${uptime}
üíæ <b>Memory:</b> ${memoryMB} MB`;
    } catch (error) {
      this.logger.error('Error getting formatted status:', error);
      return `‚ùå <b>Error getting status</b>
‚ö†Ô∏è <b>Check logs for details</b>
‚è±Ô∏è <b>Uptime:</b> ${this.getUptime()}`;
    }
  }

  private getUptime(): string {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    return `${hours}h ${minutes}m`;
  }

  private getControlKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: '‚ñ∂Ô∏è Start Queue 1', callback_data: 'start_queue_1' },
          { text: '‚èπÔ∏è Stop Queue 1', callback_data: 'stop_queue_1' },
        ],
        [
          { text: 'üìä Status', callback_data: 'status' },
          { text: 'üîÑ Restart Engine', callback_data: 'restart_engine' },
        ],
        [
          {
            text: 'üåê Open Google',
            callback_data: 'execute_task_browser_open',
          },
          {
            text: 'üîç Count Elements',
            callback_data: 'execute_task_find_elements',
          },
        ],
      ],
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
  async sendNotification(message: string, showControls = false): Promise<void> {
    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!chatId) {
      this.logger.warn('TELEGRAM_CHAT_ID not set');
      return;
    }

    if (showControls) {
      await this.telegramApiService.sendTaskControlMenu(chatId);
    } else {
      await this.telegramApiService.sendMessage(chatId, message);
    }
  }

  onModuleDestroy() {
    if (this.pollingInterval) {
      this.pollingInterval = null; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª polling
      this.logger.log('üõë Telegram polling stopped');
    }
  }
}
